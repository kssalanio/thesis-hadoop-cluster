---

# Ansible role to install Hadoop

  - name: Check If hadoop is already installed or not
    shell: "{{ hadoop_home_dir }}/bin/hadoop -version 2>&1 | grep version | awk '{print $3}' | sed 's/\"//g'"
    register: hadoop_installed

  - name: Installed hadoop version
    debug: "msg={{hadoop_installed.stdout}}"

  - name: Download and Untar/Install
    block:
    - name: "Download Hadoop from {{hadoop_download_url}}"
      #command: "wget -q -O {{hadoop_archive}} --no-check-certificate --no-cookies --header 'Cookie: oraclelicense=accept-securebackup-cookie' {{download_url}} creates={{hadoop_archive}}" ## Old way to download
      get_url:
        url: "{{hadoop_download_url}}"
        dest: "{{hadoop_archive}}"

    - name: Unpack archive
      #command: "tar -zxf {{hadoop_archive}} -C {{download_folder}} creates={{hadoop_home_dir}}" ## Old way to untar
      unarchive:
        src: "{{hadoop_archive}}"
        dest: "{{hadoop_tld}}"
        remote_src: yes

    - name: Stat hadoop dir
      stat: path="{{hadoop_tld}}hadoop-{{hadoop_version}}"
      register: hadoop_dir_stat

    - name: "Rename hadoop dir from [{{hadoop_tld}}hadoop-{{hadoop_version}}] to [{{hadoop_home_dir}}]"
      command: "mv {{hadoop_tld}}hadoop-{{hadoop_version}} {{hadoop_home_dir}}"
      when: hadoop_dir_stat.stat.exists

    - name: Fix hadoop dir ownership
      file: state=directory path={{hadoop_home_dir}} owner={{ cluster_username }} group={{ cluster_username }} recurse=yes

    when: hadoop_installed.stdout == ""

#  - block: Clean up actions
#    - name: Delete compressed file
#      file: state=absent path={{hadoop_archive}}

  - name: Configure Hadoop env vars
    block:
    - name: Backup old [{{hadoop_env_vars_file}}]
      shell: "cp {{hadoop_env_vars_file}} {{hadoop_env_vars_file}}.bak"

    - name: Set/Configure PATH in environment variables
      #shell: "echo 'PATH={{hadoop_home_dir}}bin:{{hadoop_home_dir}}sbin:$PATH' > {{hadoop_env_vars_file}}"
      lineinfile:
        path: "{{hadoop_env_vars_file}}"
        line: "PATH={{hadoop_home_dir}}bin:{{hadoop_home_dir}}sbin:$PATH"

    - name: Set/Configure HADOOP_CONF_DIR in environment variables
      #shell: "echo 'export HADOOP_CONF_DIR={{hadoop_home_dir}}etc/hadoop' >> {{hadoop_env_vars_file}}"
      lineinfile:
        path: "{{hadoop_env_vars_file}}"
        line: "export HADOOP_CONF_DIR={{hadoop_home_dir}}etc/hadoop"

    - name: Set/Configure LD_LIBRARY_PATH in environment variables
      #shell: "echo 'export LD_LIBRARY_PATH={{hadoop_home_dir}}lib/native:$LD_LIBRARY_PATH' >> {{hadoop_env_vars_file}}"
      lineinfile:
        path: "{{hadoop_env_vars_file}}"
        line: "export LD_LIBRARY_PATH={{hadoop_home_dir}}lib/native:$LD_LIBRARY_PATH"

  - name: Configure Hadoop xml conf files
    block:

#    - name: Configure namenode in core-site.xml
#      blockinfile:
#        dest: "{{hadoop_home_dir}}etc/hadoop/core-site.xml"
#        block: |
#          <property>
#              <name>fs.default.name</name>
#              <value>hdfs://node0.ken:9000</value>
#          </property>
#        backup: yes

    - name: Configure core-site.xml
      template:
        src="etc/hadoop/core-site.xml.j2"
        dest="{{hadoop_home_dir}}etc/hadoop/core-site.xml"

    - name: Configure hdfs-site.xml
      template:
        src="etc/hadoop/hdfs-site.xml.j2"
        dest="{{hadoop_home_dir}}etc/hadoop/hdfs-site.xml"

    - name: Configure mapred-site.xml
      template:
        src="etc/hadoop/mapred-site.xml.j2"
        dest="{{hadoop_home_dir}}etc/hadoop/mapred-site.xml"

    - name: Configure yarn-site.xml
      template:
        src="etc/hadoop/yarn-site.xml.j2"
        dest="{{hadoop_home_dir}}etc/hadoop/yarn-site.xml"

    - name: Configure slaves file
      template:
        src="etc/hadoop/slaves.j2"
        dest="{{hadoop_home_dir}}etc/hadoop/slaves"

